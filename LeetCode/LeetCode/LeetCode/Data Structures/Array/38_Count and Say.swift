//
//  38. Count and Say.swift
//  https://leetcode.com/problems/count-and-say/
//
//  Created by Honghao Zhang on 2016-11-02.
//  Copyright Â© 2016 Honghaoz. All rights reserved.
//

//The count-and-say sequence is the sequence of integers beginning as follows:
//1, 11, 21, 1211, 111221, ...
//
//1 is read off as "one 1" or 11.
//11 is read off as "two 1s" or 21.
//21 is read off as "one 2, then one 1" or 1211.
//Given an integer n, generate the nth sequence.
//
//Note: The sequence of integers will be represented as a string.

// A better description
//I figured it out:
//
//You start with "1" as the first line.
//
//Each subsequent line (n) is generated by passing the line before it (n - 1) as an input to a somewhat unusual function (I'll explain as brute-force for illustrative purposes):
//
//Loop through the line (n - 1) as a string. For a given character, count how many consecutive times it repeats, then put that on line n followed by the number.
//
//For example:
//
//If you have "1", the next line is "11".
//If you have "11", the next line is "21".
//If you have "111", the next line is "31".
//If you have "1111", the next line is "41".
//See the basic pattern? Just do that for every set of repeating characters on the previous line.
//Here's what it looks like with more than one sequence:
//
//If you have "11222", the next line is "2132" ("11" becomes "21" and "222" becomes "32").
//If you have "112225", the next line is "213215" ("11" becomes "21", "222" becomes "32", and "5" becomes "15").
//In terms of the sequence dictated by the description, here's the first 15 lines of output (done by hand but I don't think I made any errors):
//
//"1"
//"11"
//"21"
//"1211"
//"111221"
//"312211"
//"13112221"
//"1113213211"
//"31131211131221"
//"13211311123113112211"
//"11131221133112132113212221"
//"3113112221232112111312211312113211"
//"1321132132111213122112311311222113111221131221"
//"11131221131211131231121113112221121321132132211331222113112211"
//"311311222113111231131112132112311321322112111312211312111322212311322113212221"


import Foundation

class Num38_CountAndSay: Solution {
	func countAndSay(_ n: Int) -> String {
		var res = ""
		guard n > 0 else { return res }
		
		res = "1"
		for _ in 1..<n {
			let resChars = Array(res)
			var nextString = ""
			var lastChar = resChars[0]
			var count = 1
			var j = 1
			while j < resChars.count {
				if resChars[j] == lastChar {
					count += 1
				} else {
					nextString += "\(count)\(lastChar)"
					count = 1
				}
				
				lastChar = resChars[j]
				j += 1
			}
			nextString += "\(count)\(lastChar)"
			res = nextString
		}
		
		return res
	}
	
	func test() {
		assert(countAndSay(6) == "312211")
	}
}
